{"version":3,"sources":["useFetch.js","App.js","serviceWorker.js","index.js"],"names":["useFetch","url","_useState","useState","_useState2","Object","slicedToArray","data","setData","_useState3","_useState4","isPending","setIsPending","_useState5","_useState6","error","setError","useEffect","abortCont","AbortController","fetch","signal","then","res","ok","Error","json","console","log","catch","err","name","message","abort","App","latitude","longitude","zoom","viewport","setViewport","style","width","height","color","background","borderRadius","textAlign","partitems","urlpartner","_useFetch","partners","map","partner","push","value","attributes","drupal_internal__tid","label","selectedOption","setselectedOption","urlbase","_useState7","_useState8","setUrl","handleChangeSelect","newurl","glocations_restruct","glocations_restruct_no_duplicate_id","_useState9","_useState10","gLocations","setGLocations","result","slice","forEach","point","projet_id","includes","id","title","projet_title","type","properties","cluster","glocationId","geometry","coordinates","parseFloat","JSON","parse","projet_localisation","partenaire_id","partenaire_title","partenaire_localisation","react_default","a","createElement","className","react_select_esm","options","onChange","placeholder","onSubmit","readOnlyError","alert","react_map_gl_esm","assign","marginTop","mapStyle","accessToken","onViewportChange","newViewport","objectSpread","react_map_gl_cluster_esm","radius","extent","nodeSize","component","_ref","pointCount","key","index_esm","size","outline","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3253d4b5.chunk.js","sourcesContent":["import { useState,useEffect } from \"react\";\nconst useFetch = (url) =>{\n    const [data, setData] = useState(null);\n    const [isPending, setIsPending] = useState(true);\n    const [error, setError] =useState(null);\n\n\n    useEffect(()=>{\n        const abortCont = new AbortController();\n        fetch(url, {signal:abortCont.signal})\n        .then(res => {\n            if(!res.ok){\n                throw Error('could not fetch the data for that resources');\n            }\n            return res.json();//MMS: .clone()\n        })\n        .then(data => {\n            console.log(data);\n            setData(data);\n            setIsPending(false);\n            setError(null);\n        })\n        .catch(err => {\n            console.log('fetch error', err);\n            if(err.name === 'AbortError'){\n                console.log('fetch aborted');\n            }else{\n                setIsPending(false);\n                setError(err.message);\n\n            }\n            \n\n        });\n\n        return () => abortCont.abort();\n\n\n    },[url]);\n    return {data,isPending,error};\n}\n\nexport default useFetch;","import React, { useState, useEffect } from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport MapGL, { Marker } from '@urbica/react-map-gl';\r\nimport Cluster from '@urbica/react-map-gl-cluster';\r\n//import useSwr from \"swr\";\r\nimport { FaPiedPiperPp, FaProductHunt } from 'react-icons/fa';\r\nimport \"./App.css\";\r\nimport {ReactSearchAutocomplete} from \"react-search-autocomplete\";\r\nimport useFetch from \"./useFetch\";\r\nimport Select from \"react-select\";\r\n\r\nexport default function App() {\r\n\r\n  const base = process.env.REACT_APP_BASE_URL;\r\n  const [viewport, setViewport] = useState({\r\n    latitude: 12.4578,\r\n    longitude: 16.55445,\r\n    zoom: 1.5\r\n  });\r\n\r\n  const style = {\r\n    width: '20px',\r\n    height: '20px',\r\n    color: '#fff',\r\n    background: '#00f',\r\n    borderRadius: '20px',\r\n    textAlign: 'center'\r\n  };\r\n\r\n  const projet = {\r\n    width: '20px',\r\n    height: '20px',\r\n    color: '#fff',\r\n    background: 'transparent',\r\n    borderRadius: '20px',\r\n    textAlign: 'center',\r\n    strokeWidth: 0,\r\n    fontSize: \"40px\"\r\n  };\r\n  const partenaire = {\r\n    width: '20px',\r\n    height: '20px',\r\n    color: '#fff',\r\n    background: 'transparent',\r\n    borderRadius: '20px',\r\n    textAlign: 'center',\r\n    strokeWidth: 0,\r\n    fontSize: \"4em\"\r\n  };\r\n\r\n  const style_partenaire = {\r\n    width: '20px',\r\n    height: '20px',\r\n    color: '#fff',\r\n    background: '#f00',\r\n    borderRadius: '20px',\r\n    textAlign: 'center'\r\n  };\r\n\r\n  const style_projet= {\r\n    color: \"red\",\r\n    fontSize: \"100px\",\r\n    height: \"100px\",\r\n  };\r\n\r\n  const ClusterMarker = ({ longitude, latitude, pointCount }) => (\r\n    <Marker longitude={longitude} latitude={latitude}>\r\n      <div style={{ ...style, background: 'orange' }}>{pointCount}</div>\r\n    </Marker>\r\n  );\r\n\r\n  //terms taxonomy partners\r\n  let partitems = []\r\n  //let urlpartner = base+'/api/taxonomy_term/cateegorie_partenaire';\r\n  let urlpartner = 'http://gmv/api/taxonomy_term/cateegorie_partenaire';\r\n  console.log(\"urlpartner\", urlpartner)\r\n  const {data:partners, isPending, error} = useFetch(urlpartner);\r\n  console.log(\"partners:\", partners);\r\n  if(partners){\r\n      partners.data.map((partner) => (\r\n          partitems.push({ value : partner.attributes.drupal_internal__tid, label: partner.attributes.name})\r\n      ));\r\n  }\r\n   \r\n  const [name, setName] = useState('');\r\n  const [selectedOption, setselectedOption] = useState('');\r\n\r\n  var urlbase = \"http://gmv/geolocations/?_format=json\"\r\n  const [url, setUrl] = useState(urlbase);\r\n\r\n  const handleChangeSelect = (selectedOption) => {\r\n      \r\n       //new url\r\n       var newurl = urlbase + \"&field_categorie_target_id=\" + selectedOption.value;\r\n       setUrl(newurl);\r\n       setselectedOption(selectedOption);\r\n       console.log(\"new url\", newurl);\r\n        \r\n      };\r\n  const handleSubmit = () => {\r\n    // the item selected\r\n    /*console.log(item);\r\n    const results = annonces.data.filter((annonce) => {\r\n        return annonce.relationships.field_affiliation.data.id.startsWith(item.id) ;\r\n        // Use the toLowerCase() method to make it case-insensitive\r\n      });\r\n    setFoundAnnonces(results);*/\r\n\r\n    //new url\r\n    url = urlbase + \"&partenaire_categorie=\" + selectedOption;\r\n    alert(url);\r\n    console.log(\"new url\", url);\r\n    setUrl(url);\r\n  }\r\n  const handleNameChange = (e) => {\r\n    const keyword = e.target.value;\r\n    setName(keyword);\r\n  };\r\n\r\n    // all geolocations\r\n  var glocations_restruct = [];\r\n  var glocations_restruct_no_duplicate_id = []; //avoid duplicata\r\n  const [gLocations, setGLocations] = useState([]);\r\n  useEffect(() => {\r\n    fetch(url)\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          console.log(\"new url for looping\", url);\r\n          result.slice(0, 2000).forEach((point) => \r\n            { \r\n              if (point.projet_id && !glocations_restruct_no_duplicate_id.includes(point.projet_id))//in case in a project share between many partenaires..\r\n              {\r\n                  glocations_restruct.push(\r\n                  {\r\n                    id: point.projet_id,\r\n                    title: point.projet_title,\r\n                    type: \"projet\",\r\n                    properties: { cluster: false, glocationId: point.projet_id},\r\n                    geometry: {\r\n                      coordinates: [\r\n                        parseFloat(JSON.parse(point.projet_localisation).coordinates[1]),//longitude\r\n                        parseFloat(JSON.parse(point.projet_localisation).coordinates[0]), //latitude\r\n                      ]\r\n                    }\r\n                  }); \r\n\r\n                  glocations_restruct_no_duplicate_id.push(point.projet_id);                \r\n              }\r\n\r\n              if (point.partenaire_id && !glocations_restruct_no_duplicate_id.includes(point.partenaire_id))//in case in a project share between many partenaires..\r\n              {\r\n                  glocations_restruct.push(\r\n                  {\r\n                    id: point.partenaire_id,\r\n                    title: point.partenaire_title,\r\n                    type: \"partenaire\",\r\n                    properties: { cluster: false, glocationId: point.partenaire_id},\r\n                    geometry: {\r\n                      coordinates: [\r\n                        parseFloat(JSON.parse(point.partenaire_localisation).coordinates[1]),//longitude\r\n                        parseFloat(JSON.parse(point.partenaire_localisation).coordinates[0]), //latitude\r\n                      ]\r\n                    }\r\n                  });\r\n\r\n                  glocations_restruct_no_duplicate_id.push(point.partenaire_id);\r\n              }\r\n                              \r\n            }\r\n          );\r\n\r\n          setGLocations(glocations_restruct);\r\n          console.log(\"gLocations.length\", glocations_restruct);\r\n        }\r\n      )\r\n      .catch(\r\n        (error) => {\r\n         \r\n        }\r\n      )\r\n  }, [url])\r\n\r\n  \r\nreturn (\r\n  <div className=\"carto\"> \r\n     <div className=\"row filtering\">       \r\n\r\n             \r\n              <div className=\"col-md-3\">\r\n               <label>Par catégorie</label>\r\n                  <Select options={partitems}\r\n                  value={selectedOption}\r\n                  onChange={handleChangeSelect}\r\n                  />\r\n              </div>\r\n             \r\n              <div className=\"col-md-3\">\r\n               <label>Par thématique</label>\r\n                  <Select options={partitems}\r\n                  value={selectedOption}\r\n                  onChange={handleChangeSelect}\r\n                  />\r\n              </div>\r\n               \r\n              <div className=\"col-md-3\">\r\n              <label>Par type de réalisation</label>\r\n                  <Select options={partitems}\r\n                  value={selectedOption}\r\n                  onChange={handleChangeSelect}\r\n                  />\r\n              </div>\r\n              <div className=\"col-md-3\">\r\n                <input\r\n                    type=\"search\"\r\n                    value={name}\r\n                    //onChange={handleNameChange}\r\n                    className=\"input\"\r\n                    placeholder=\"\"\r\n                />            \r\n              </div>\r\n              <div className=\"col-md-3\">\r\n                  <input type=\"submit\" value=\"Chercher\" onSubmit={handleSubmit} />\r\n              </div>\r\n\r\n    </div>\r\n    <div className=\"row the_mapbox\">\r\n      <MapGL\r\n        style={{ width: '100%', height: '400px' , marginTop: '15px'}}\r\n        //mapStyle='mapbox://styles/mapbox/satellite-v9'\r\n        mapStyle='mapbox://styles/mapbox/light-v9'\r\n        //accessToken={MAPBOX_ACCESS_TOKEN}\r\n        accessToken=\"pk.eyJ1IjoibW1zb3ciLCJhIjoiY2t0YmFydjB1MXR5NDJ1cWxxZWhjZnYwciJ9.CZER0uLmoE91iAgIptvD3g\"\r\n        onViewportChange={newViewport => {\r\n              setViewport({ ...newViewport });\r\n            }}\r\n        {...viewport}\r\n      >\r\n        <Cluster radius={80} extent={512} nodeSize={64} component={ClusterMarker}>\r\n          {\r\n             \r\n                gLocations.map((point) => { \r\n                 \r\n                  //console.log(\"id\", point.id);\r\n\r\n                  if (point.type == 'partenaire')\r\n                  {\r\n                     return(                 \r\n                      <Marker\r\n                        key={point.id}\r\n                        longitude={point.geometry.coordinates[1]}\r\n                        latitude={point.geometry.coordinates[0]}\r\n                      >\r\n                       <button className={point.type}>\r\n                           <FaPiedPiperPp color=\"#aaD100\" size='2em' title={point.title}/>\r\n                        </button>\r\n\r\n                      </Marker>        \r\n                    );\r\n                  }\r\n\r\n                  if (point.type == 'projet')\r\n                  {           \r\n                     return(\r\n                      \r\n                      <Marker\r\n                        key={point.id}\r\n                        longitude={point.geometry.coordinates[1]}\r\n                        latitude={point.geometry.coordinates[0]}\r\n                      >\r\n                        <button style={{outline: 'none !important;'}} className={point.type}>\r\n                           <FaProductHunt color=\"#00D100\" size='1.6em' title={point.title}/>\r\n                        </button>\r\n                      </Marker>\r\n                    );\r\n                  }\r\n                }\r\n              ) \r\n         }\r\n        </Cluster>\r\n      </MapGL>\r\n     </div> \r\n    </div> \r\n  );\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('mapcarto'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}